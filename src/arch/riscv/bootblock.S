/*
 * Early initialization code for aarch64 (a.k.a. armv8)
 *
 * Copyright 2013Google Inc.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; version 2 of
 * the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc.
 */
// See LICENSE for license details. relating to the _start code in this file.
#include <arch/encoding.h>

.section ".text._start", "ax", %progbits
// Maybe there's a better way.
.space 0x200
.globl _start
_start:
#if __GNUC__ >= 5
  // Check to see if this is the boot cpu. if not, wait.
  csrr t0, mhartid
  bne t0, x0, wait_for_interrupt
#endif

  // See memlayout.ld under mainboard and memlayout.h
  // In arch/include and include
  // 0x7ff00 -- Top of Stack    -- _estack
  // 0x40000 -- Bottom of Stack -- _stack
  la sp, _estack
  la t0, _stack

  // Make room for HART Local Storage
  addi sp, sp, -64
 
  // Poison the whole stack.
  li t1, 0xdeadbeef
init_stack_loop:
  sw t1, 0(t0)
  addi t0, t0, 4

  // Clear any pending interrupts
#if __GNUC__ < 5
  csrwi clear_ipi, 0
#else
  csrwi sip, 0
#endif

  call main

#if __GNUC__ >= 5
wait_for_interrupt:
 wfi
  j wait_for_interrupt
#endif
.=0x4000
// Nothing below this actually seems necessary, but I assume it's for
// Versioning Code.

	.section ".id", "a", %progbits

	.section ".id", "a", @progbits

	.globl __id_start
	// fix this bs later. What's wrong with the riscv gcc?
__id_start:
ver:
	.asciz "1" //COREBOOT_VERSION
vendor:
	.asciz "ucb" //CONFIG_MAINBOARD_VENDOR
part:
	.asciz "1" //CONFIG_MAINBOARD_PART_NUMBER
.long __id_end + CONFIG_ID_SECTION_OFFSET - ver  /* Reverse offset to the vendor id */
.long __id_end + CONFIG_ID_SECTION_OFFSET - vendor  /* Reverse offset to the vendor id */
.long __id_end + CONFIG_ID_SECTION_OFFSET - part    /* Reverse offset to the part number */
.long CONFIG_ROM_SIZE                               /* Size of this romimage */
	.globl __id_end

__id_end:
.previous
